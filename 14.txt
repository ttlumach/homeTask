import Foundation

// 1/2
struct Birthdate{
    var day: Int
    var month: Int
    var year: Int
}

struct Student{
    var name: String{
        didSet{
            name = name.capitalized
        }
    }
    var surname: String{
        didSet{
            surname = surname.capitalized
        }
    }
    var fullname: String{
        get{
            return ("\(name) \(surname)")
        }
        set{
            var splitArray = newValue.split(separator: " ")
            if splitArray.count > 1{
                self.name = String(splitArray[0])
                self.surname = String(splitArray[1])
            } else if  splitArray.count > 0 {
                self.name = String(splitArray[0])
            }
        }
    }
    var birthdate: Birthdate
    var age: Int{
        let calendar = Calendar.current
        return calendar.component(.year, from: Date()) - birthdate.year
    }
    var yearsOfKnowledge: Int{
        return age - 6 > 0 ? age - 6 : 0
    }
}

var student1 = Student(name: "Vasya", surname: "Pupkin", birthdate: Birthdate(day: 23,month: 07,year: 2000))
print(student1.name)
print(student1.surname)
print(student1.fullname)

student1.fullname = "petro peedro"
print(student1.name)
print(student1.surname)
print(student1.fullname)
print(student1.age)
print(student1.yearsOfKnowledge)



// 2/2
print("-------------------------")

struct Point{
    var x: Double
    var y: Double
}

struct Segment{
    var a: Point
    var b: Point
    var midpoint: Point{
        get{
            return Point(x: (a.x + b.x)/2, y: (a.y + b.y)/2)
        }
        set{
            var midx = midpoint.x
            var midy = midpoint.y
            a = Point(x: a.x + newValue.x - midx, y: a.y + newValue.y - midy) 
            b = Point(x: b.x + newValue.x - midx, y: b.y + newValue.y - midy)
           
        }
    }
    var length: Double{
        get{
            return ( (b.x - a.x)*(b.x - a.x) + (b.y - a.y)*(b.y - a.y) ).squareRoot()
        }
        set{
            b.x =  b.x + newValue - length
            b.y =  b.y + newValue - length
        }
    }
}

var s = Segment(a: Point(x: 0.0,y: 0.0), b: Point(x: 2.0,y: 0.0))
print(s.a)
print(s.b)
print(s.length)
print(s.midpoint)
s.midpoint = Point(x: 3.0, y: 3.0)
print("M - \(s.midpoint)")
print(s.a)
print(s.b)
print(s.length)
s.length = 5
print(s.a)
print(s.b)
print(s.length)